library(radiant)
radiant()
#' Compare means for two or more variables#
#'#
#' @details See \url{http://vnijs.github.io/radiant/quant/compare_means.html} for an example in Radiant#
#'#
#' @param dataset Dataset name (string). This can be a dataframe in the global environment or an element in an r_data list from Radiant#
#' @param cm_var1 A numeric variable or factor selected for comparison#
#' @param cm_var2 One or more numeric variables for comparison. If cm_var1 is a factor only one variable can be selected and the mean of this variable is compared across (factor) levels of cm_var1#
#' @param data_filter Expression entered in, e.g., Data > View to filter the dataset in Radiant. The expression should be a string (e.g., "price > 10000")#
#' @param cm_alternative The alternative hypothesis ("two.sided", "greater" or "less")#
#' @param cm_sig_level Span of the confidence interval#
#' @param cm_adjust Adjustment for multiple comparisons ("none" or "bonf" for Bonferroni)#
#'#
#' @return A list of all variables defined in the function as an object of class compare_means#
#'#
#' @examples#
#' result <- compare_means("diamonds","cut","price")#
#'#
#' @seealso \code{\link{summary.compare_means}} to summarize results#
#' @seealso \code{\link{plot.compare_means}} to plot results#
#'#
#' @export#
compare_means <- function(dataset, cm_var1, cm_var2,#
                          data_filter = "",#
                          cm_paired = "independent",#
                          cm_alternative = "two.sided",#
                          cm_sig_level = .95,#
                          cm_adjust = "none",#
                          cm_plots = "bar") {#
#
    vars <- c(cm_var1, cm_var2)#
    # dat <- getdata(dataset, vars)#
    dat <- getdata(dataset, vars, filt = data_filter)#
#
    if(dat[,cm_var1] %>% is.factor) {#
        colnames(dat) <- c("variable","values")#
    } else {#
        dat %<>% gather_("variable", "values", vars)#
    }#
#
    # check variances in the data#
  if(dat %>% summarise_each(., funs(var(.,na.rm = TRUE))) %>% min %>% {. == 0})#
    return("Test could not be calculated. Please select another variable.")#
#
    # resetting option to independent if the number of observations is unequal#
  if(cm_paired == "paired")#
    if(summary(dat$variable) %>% { max(.) != min(.) })#
      cm_paired <- "independent (obs. per level unequal)"#
#
    ###############################################
    # flip the order of pairwise testing - part 1#
    ###############################################
  flip_alt <- c("two.sided" = "two.sided",#
                "less" = "greater",#
                "greater" = "less")#
    ###############################################
#
    pairwise.t.test(dat[,"values"], dat[,"variable"], pool.sd = FALSE,#
                    p.adj = cm_adjust, paired = cm_paired == "paired",#
                  alternative = flip_alt[cm_alternative]) %>% tidy -> res#
#
    ###############################################
    # flip the order of pairwise testing - part 2#
    ###############################################
    res[,c("group1","group2")] <- res[,c("group2","group1")]#
    ###############################################
#
    plot_height <- 400 * length(cm_plots)#
#
    # from http://www.cookbook-r.com/Graphs/Plotting_means_and_error_bars_(ggplot2)/#
    ci_calc <- function(se, n, conf.lev = .95)#
        se * qt(conf.lev/2 + .5, n-1)#
#
    dat %>%#
        group_by(variable) %>%#
    summarise_each(funs(mean, n = length(.), sd,#
                            se = sd/sqrt(n),#
                            ci = ci_calc(se,n,cm_sig_level))) %>%#
    rename_(.dots = setNames("variable", " ")) -> dat_summary#
#
    vars <- paste0(vars, collapse=", ")#
  environment() %>% as.list %>% set_class(c("compare_means",class(.)))#
}#
#
#' Summarize method for output from compare_means#
#'#
#' @details See \url{http://vnijs.github.io/radiant/quant/compare_means.html} for an example in Radiant#
#'#
#' @param result Return value from \code{\link{single_mean}}#
#'#
#' @examples#
#' result <- compare_means("diamonds","cut","price")#
#' summary(result)#
#'#
#' @seealso \code{\link{compare_means}} to calculate results#
#' @seealso \code{\link{plot.compare_means}} to plot results#
#'#
#' @export#
summary.compare_means <- function(result) {#
#
  if(result$cm_adjust == "bonf") {#
    cat("Pairwise comparisons (bonferroni adjustment)\n")#
  } else {#
      cat("Pairwise comparisons (no adjustment)\n")#
  }#
#
    cat("Data     :", result$dataset, "\n")#
    if(result$data_filter %>% gsub("\\s","",.) != "")#
        cat("Filter   :", gsub("\\n","", result$data_filter), "\n")#
    cat("Variables:", result$vars, "\n")#
    cat("Samples  :", result$cm_paired, "\n\n")#
#
  result$dat_summary[,-1] %<>% round(3)#
  print(result$dat_summary %>% as.data.frame, row.names = FALSE)#
    cat("\n")#
#
  hyp_symbol <- c("two.sided" = "not equal to",#
                  "less" = "<",#
                  "greater" = ">")[result$cm_alternative]#
#
  means <- result$dat_summary$mean#
  names(means) <- result$dat_summary$` ` %>% as.character#
#
    mod <- result$res#
    mod$`Alt. hyp.` <- paste(mod$group1,hyp_symbol,mod$group2," ")#
    mod$`Null hyp.` <- paste(mod$group1,"=",mod$group2, " ")#
    mod$diff <- { means[mod$group1 %>% as.character] - means[mod$group2 %>% as.character] } %>% round(3)#
    mod <- mod[,c("Alt. hyp.", "Null hyp.", "diff", "p.value")]#
    mod$` ` <- sig_stars(mod$p.value)#
    mod$p.value <- round(mod$p.value,3)#
    mod$p.value[ mod$p.value < .001 ] <- "< .001"#
    print(mod, row.names = FALSE, right = FALSE)#
    cat("\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n")#
}#
#
#' Plot method for output from compare_means#
#'#
#' @details See \url{http://vnijs.github.io/radiant/quant/compare_means.html} for an example in Radiant#
#'#
#' @param result Return value from \code{\link{single_mean}}#
#' @param cm_plots One or more plots ("bar", "box", or "density")#
#'#
#' @examples#
#' result <- compare_means("diamonds","cut","price", cm_plots = "box")#
#' plot(result, cm_plots = c("bar","density"))#
#'#
#' @seealso \code{\link{compare_means}} to calculate results#
#' @seealso \code{\link{summary.compare_means}} to summarize results#
#'#
#' @export#
plot.compare_means <- function(result, cm_plots = "bar") {#
#
    dat <- result$dat#
    var1 <- colnames(dat)[1]#
    var2 <- colnames(dat)[-1]#
#
    # from http://www.cookbook-r.com/Graphs/Plotting_means_and_error_bars_(ggplot2)/#
    plots <- list()#
    if("bar" %in% result$cm_plots) {#
        colnames(result$dat_summary)[1] <- "variable"#
        # use of `which` allows the user to change the order of the plots shown#
        plots[[which("bar" == result$cm_plots)]] <- ggplot(result$dat_summary,#
        aes_string(x="variable", y="mean", fill="variable")) +#
        geom_bar(stat="identity")  +#
            geom_errorbar(width=.1, aes(ymin=mean-ci, ymax=mean+ci)) +#
            geom_errorbar(width=.05, aes(ymin=mean-se, ymax=mean+se), colour = "blue")#
    }#
#
    # graphs on full data#
    if("box" %in% result$cm_plots) {#
        plots[[which("box" == result$cm_plots)]] <-#
            ggplot(dat, aes_string(x=var1, y=var2, fill=var1)) +#
                geom_boxplot(alpha=.7)#
    }#
#
    if("density" %in% result$cm_plots) {#
        plots[[which("density" == result$cm_plots)]] <-#
            ggplot(dat, aes_string(x=var2, fill=var1)) + geom_density(alpha=.7)#
    }#
#
    sshh( do.call(grid.arrange, c(plots, list(ncol = 1))) )#
}
result <- compare_means("diamonds","cut","price")
summary(result)
plot(result, cm_plots = c("bar","density"))
#' Compare means for two or more variables#
#'#
#' @details See \url{http://vnijs.github.io/radiant/quant/compare_means.html} for an example in Radiant#
#'#
#' @param dataset Dataset name (string). This can be a dataframe in the global environment or an element in an r_data list from Radiant#
#' @param cm_var1 A numeric variable or factor selected for comparison#
#' @param cm_var2 One or more numeric variables for comparison. If cm_var1 is a factor only one variable can be selected and the mean of this variable is compared across (factor) levels of cm_var1#
#' @param data_filter Expression entered in, e.g., Data > View to filter the dataset in Radiant. The expression should be a string (e.g., "price > 10000")#
#' @param cm_alternative The alternative hypothesis ("two.sided", "greater" or "less")#
#' @param cm_sig_level Span of the confidence interval#
#' @param cm_adjust Adjustment for multiple comparisons ("none" or "bonf" for Bonferroni)#
#'#
#' @return A list of all variables defined in the function as an object of class compare_means#
#'#
#' @examples#
#' result <- compare_means("diamonds","cut","price")#
#'#
#' @seealso \code{\link{summary.compare_means}} to summarize results#
#' @seealso \code{\link{plot.compare_means}} to plot results#
#'#
#' @export#
compare_means <- function(dataset, cm_var1, cm_var2,#
                          data_filter = "",#
                          cm_paired = "independent",#
                          cm_alternative = "two.sided",#
                          cm_sig_level = .95,#
                          cm_adjust = "none") {#
#
    vars <- c(cm_var1, cm_var2)#
    dat <- getdata(dataset, vars, filt = data_filter)#
#
    if(dat[,cm_var1] %>% is.factor) {#
        colnames(dat) <- c("variable","values")#
    } else {#
        dat %<>% gather_("variable", "values", vars)#
    }#
#
    # check variances in the data#
  if(dat %>% summarise_each(., funs(var(.,na.rm = TRUE))) %>% min %>% {. == 0})#
    return("Test could not be calculated. Please select another variable.")#
#
    # resetting option to independent if the number of observations is unequal#
  if(cm_paired == "paired")#
    if(summary(dat$variable) %>% { max(.) != min(.) })#
      cm_paired <- "independent (obs. per level unequal)"#
#
    ###############################################
    # flip the order of pairwise testing - part 1#
    ###############################################
  flip_alt <- c("two.sided" = "two.sided",#
                "less" = "greater",#
                "greater" = "less")#
    ###############################################
#
    pairwise.t.test(dat[,"values"], dat[,"variable"], pool.sd = FALSE,#
                    p.adj = cm_adjust, paired = cm_paired == "paired",#
                  alternative = flip_alt[cm_alternative]) %>% tidy -> res#
#
    ###############################################
    # flip the order of pairwise testing - part 2#
    ###############################################
    res[,c("group1","group2")] <- res[,c("group2","group1")]#
    ###############################################
#
    # from http://www.cookbook-r.com/Graphs/Plotting_means_and_error_bars_(ggplot2)/#
    ci_calc <- function(se, n, conf.lev = .95)#
        se * qt(conf.lev/2 + .5, n-1)#
#
    dat %>%#
        group_by(variable) %>%#
    summarise_each(funs(mean, n = length(.), sd,#
                            se = sd/sqrt(n),#
                            ci = ci_calc(se,n,cm_sig_level))) %>%#
    rename_(.dots = setNames("variable", " ")) -> dat_summary#
#
    vars <- paste0(vars, collapse=", ")#
  environment() %>% as.list %>% set_class(c("compare_means",class(.)))#
}#
#
#' Summarize method for output from compare_means#
#'#
#' @details See \url{http://vnijs.github.io/radiant/quant/compare_means.html} for an example in Radiant#
#'#
#' @param result Return value from \code{\link{single_mean}}#
#'#
#' @examples#
#' result <- compare_means("diamonds","cut","price")#
#' summary(result)#
#'#
#' @seealso \code{\link{compare_means}} to calculate results#
#' @seealso \code{\link{plot.compare_means}} to plot results#
#'#
#' @export#
summary.compare_means <- function(result) {#
#
  if(result$cm_adjust == "bonf") {#
    cat("Pairwise comparisons (bonferroni adjustment)\n")#
  } else {#
      cat("Pairwise comparisons (no adjustment)\n")#
  }#
#
    cat("Data     :", result$dataset, "\n")#
    if(result$data_filter %>% gsub("\\s","",.) != "")#
        cat("Filter   :", gsub("\\n","", result$data_filter), "\n")#
    cat("Variables:", result$vars, "\n")#
    cat("Samples  :", result$cm_paired, "\n\n")#
#
  result$dat_summary[,-1] %<>% round(3)#
  print(result$dat_summary %>% as.data.frame, row.names = FALSE)#
    cat("\n")#
#
  hyp_symbol <- c("two.sided" = "not equal to",#
                  "less" = "<",#
                  "greater" = ">")[result$cm_alternative]#
#
  means <- result$dat_summary$mean#
  names(means) <- result$dat_summary$` ` %>% as.character#
#
    mod <- result$res#
    mod$`Alt. hyp.` <- paste(mod$group1,hyp_symbol,mod$group2," ")#
    mod$`Null hyp.` <- paste(mod$group1,"=",mod$group2, " ")#
    mod$diff <- { means[mod$group1 %>% as.character] - means[mod$group2 %>% as.character] } %>% round(3)#
    mod <- mod[,c("Alt. hyp.", "Null hyp.", "diff", "p.value")]#
    mod$` ` <- sig_stars(mod$p.value)#
    mod$p.value <- round(mod$p.value,3)#
    mod$p.value[ mod$p.value < .001 ] <- "< .001"#
    print(mod, row.names = FALSE, right = FALSE)#
    cat("\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n")#
}#
#
#' Plot method for output from compare_means#
#'#
#' @details See \url{http://vnijs.github.io/radiant/quant/compare_means.html} for an example in Radiant#
#'#
#' @param result Return value from \code{\link{single_mean}}#
#' @param cm_plots One or more plots ("bar", "box", or "density")#
#'#
#' @examples#
result <- compare_means("diamonds","cut","price")#
summary(result)#
plot(result, cm_plots = c("bar","density"))#
#'#
#' @seealso \code{\link{compare_means}} to calculate results#
#' @seealso \code{\link{summary.compare_means}} to summarize results#
#'#
#' @export#
plot.compare_means <- function(result, cm_plots = "bar") {#
#
    dat <- result$dat#
    var1 <- colnames(dat)[1]#
    var2 <- colnames(dat)[-1]#
#
    # from http://www.cookbook-r.com/Graphs/Plotting_means_and_error_bars_(ggplot2)/#
    plots <- list()#
    if("bar" %in% cm_plots) {#
        colnames(result$dat_summary)[1] <- "variable"#
        # use of `which` allows the user to change the order of the plots shown#
        plots[[which("bar" == cm_plots)]] <- ggplot(result$dat_summary,#
        aes_string(x="variable", y="mean", fill="variable")) +#
        geom_bar(stat="identity")  +#
            geom_errorbar(width=.1, aes(ymin=mean-ci, ymax=mean+ci)) +#
            geom_errorbar(width=.05, aes(ymin=mean-se, ymax=mean+se), colour = "blue")#
    }#
#
    # graphs on full data#
    if("box" %in% cm_plots) {#
        plots[[which("box" == cm_plots)]] <-#
            ggplot(dat, aes_string(x=var1, y=var2, fill=var1)) +#
                geom_boxplot(alpha=.7)#
    }#
#
    if("density" %in% cm_plots) {#
        plots[[which("density" == cm_plots)]] <-#
            ggplot(dat, aes_string(x=var2, fill=var1)) + geom_density(alpha=.7)#
    }#
#
    sshh( do.call(grid.arrange, c(plots, list(ncol = 1))) )#
}
result <- compare_means("diamonds","cut","price")
summary(result)
plot(result, cm_plots = c("bar","density"))
#' Hierarchical cluster analysisHierarchical cluster analysisHierarchical cluster analysisHierarchical cluster analysis#
#'#
#' @details See \url{http://vnijs.github.io/radiant/quant/hier_clus.html} for an example in Radiant#
#'#
#' @param dataset Dataset name (string). This can be a dataframe in the global environment or an element in an r_data list from Radiant#
#' @param hc_vars Vector of variables to include in the analysis#
#' @param data_filter Expression entered in, e.g., Data > View to filter the dataset in Radiant. The expression should be a string (e.g., "price > 10000")#
#' @param hc_dist Distance#
#' @param hc_meth Method#
#'#
#' @return A list of all variables used in hier_clus as an object of class hier_clus#
#'#
#' @examples#
#' result <- hier_clus("shopping", hc_vars = c("v1:v6"))#
#'#
#' @seealso \code{\link{summary.hier_clus}} to summarize results#
#' @seealso \code{\link{plot.hier_clus}} to plot results#
#'#
#' @export#
hier_clus <- function(dataset, hc_vars,#
                  data_filter = "",#
                  hc_dist = "sq.euclidian",#
                  hc_meth = "ward.D") {#
#
    getdata(dataset, hc_vars, filt = data_filter) %>%#
      scale %>%#
      { if(hc_dist == "sq.euclidian") {#
                dist(., method = "euclidean")^2#
            } else {#
                dist(., method = hc_dist)#
            }#
        } %>% hclust(d = ., method = hc_meth) -> hc_out#
#
    environment() %>% as.list %>% set_class(c("hier_clus",class(.)))#
}#
#
#' Summary method for hier_clus#
#'#
#' @details See \url{http://vnijs.github.io/radiant/quant/hier_clus.html} for an example in Radiant#
#'#
#' @param result Return value from \code{\link{hier_clus}}#
#'#
#' @examples#
#' result <- hier_clus("shopping", hc_vars = c("v1:v6"))#
#' summary(result)#
#'#
#' @seealso \code{\link{summary.hier_clus}} to summarize results#
#' @seealso \code{\link{plot.hier_clus}} to plot results#
#'#
#' @export#
summary.hier_clus <- function(result) {#
#
    cat("Hierarchical cluster analysis\n")#
    cat("Data        :", result$dataset, "\n")#
    if(result$data_filter %>% gsub("\\s","",.) != "")#
        cat("Filter      :", gsub("\\n","", result$data_filter), "\n")#
    cat("Variables   :", paste0(result$hc_vars, collapse=", "), "\n")#
    cat("Method      :", result$hc_meth, "\n")#
    cat("Distance    :", result$hc_dist, "\n")#
    cat("Observations:", length(result$hc_out$order), "\n")#
}#
#
#' Plot method for hier_clus#
#'#
#' @details See \url{http://vnijs.github.io/radiant/quant/hier_clus.html} for an example in Radiant#
#'#
#' @param result Return value from \code{\link{hier_clus}}#
#' @param hc_plots Plots to return. "diff" shows the percentage change in within-cluster heterogeneity as respondents are group into different number of clusters, "dendro" shows the dendrogram, "scree" shows a scree plot of within-cluster heterogeneity#
#' @param hc_cutoff For large datasets plots can take time to render and become hard to interpret. By selection a cutoff point (e.g., 0.05 percent) the initial steps in hierachical cluster analysis are removed from the plot#
#'#
#' @examples#
#' result <- hier_clus("shopping", hc_vars = c("v1:v6"))#
#' plot(result, hc_plots = c("diff", "scree"), hc_cutoff = .05)#
#' plot(result, hc_plots = c("diff", "dendro"), hc_cutoff = .05)#
#' plot(result, hc_plots = c("diff", "dendro"), hc_cutoff = 0)#
#' plot(result, hc_plots = "dendro", hc_cutoff = 0)#
#'#
#' @seealso \code{\link{summary.hier_clus}} to summarize results#
#' @seealso \code{\link{plot.hier_clus}} to plot results#
#'#
#' @import ggdendro#
#'#
#' @export#
plot.hier_clus <- function(result, hc_plots = c("scree","diff"), hc_cutoff = 0.02) {#
#
    # importFrom ggdendro ggdendrogram dendro_data segment#
    result$hc_out$height %<>% { . / max(.) }#
#
    plots <- list()#
    if("scree" %in% hc_plots) {#
        result$hc_out$height[result$hc_out$height > hc_cutoff] %>%#
        data.frame(height = ., nr_clus = length(.):1) %>%#
        ggplot(aes(x=factor(nr_clus,levels=nr_clus), y=height, group = 1)) +#
                  geom_line(colour="blue", linetype = 'dotdash', size=.7) +#
              geom_point(colour="blue", size=4, shape=21, fill="white") +#
              labs(list(title = paste("Scree plot"), x = "# clusters",#
                   y = "Within cluster heterogeneity")) -> plots[['scree']]#
    }#
#
    if("diff" %in% hc_plots) {#
        result$hc_out$height[result$hc_out$height > hc_cutoff] %>%#
            { (. - lag(.)) / lag(.) } %>%#
            data.frame(bump = ., nr_clus = paste0((length(.)+1):2, "-", length(.):1)) %>%#
            na.omit %>%#
            ggplot(aes(x=factor(nr_clus, levels = nr_clus), y=bump)) +#
                geom_bar(stat = "identity") +#
                labs(list(title = paste("Change in within-cluster heterogeneity"),#
                     x = "# clusters", y = "Change in within-cluster heterogeneity")) -> plots[['diff']]#
    }#
#
    if("dendro" %in% hc_plots) {#
#
        if(length(result$hc_out$height) < 100) {#
#
            if(hc_cutoff == 0) {#
                ggdendrogram(result$hc_out) + labs(list(title = paste("Dendrogram"), x = "",#
                  y = "Within cluster heterogeneity")) + theme_grey() -> plots[['dendro']]#
            } else {#
                result$hc_out %>% dendro_data(type="rectangle") %>%#
                    segment %>% filter(y > hc_cutoff) %>% ggplot(.) +#
                    geom_segment(aes(x=x, y=y, xend=xend, yend=yend))+#
                    labs(list(title = paste("Cutoff dendrogram"), x = "", y = "Within cluster heterogeneity")) +#
                    theme_grey() + theme(axis.text.x = element_blank()) -> plots[['dendro']]#
            }#
        } else {#
            as.dendrogram(result$hc_out) %>%#
            {#
                if(length(hc_plots) > 1) {#
                    xlab <- "When the number of observations is larger than 100 only the dendrogram is shown even\n if other types are specified. Call the plot function separately for different plot types."#
                } else{#
                    xlab <- ""#
                }#
                if(hc_cutoff == 0) {#
                    plot(., main = "Dendrogram", xlab = xlab, ylab = "Within cluster heterogeneity")#
                } else {#
                    plot(., ylim = c(hc_cutoff,1), leaflab='none',#
                         main = "Cutoff dendrogram", xlab = xlab, ylab = "Within cluster heterogeneity")#
                }#
            }#
            return(invisible())#
        }#
    }#
#
    sshh( do.call(grid.arrange, c(plots, list(ncol = 1))) )#
}
result <- hier_clus("shopping", hc_vars = c("v1:v6"))
load("/Users/vnijs/Desktop/GitHub/radiant/inst/marketing/data/data_rady/toothpaste.rda")
load("/Users/vnijs/Desktop/GitHub/radiant/inst/marketing/data/data_rady/shopping.rda")
result <- hier_clus("shopping", hc_vars = c("v1:v6"))
plot(result, hc_plots = c("diff", "dendro"), hc_cutoff = 0)
library(ggdendro)
result <- hier_clus("shopping", hc_vars = c("v1:v6"))
plot(result, hc_plots = c("diff", "dendro"), hc_cutoff = 0)
result <- hier_clus("toothpaste", hc_vars = c("v1:v6"))
plot(result, hc_plots = "dendro", hc_cutoff = 0)
ggdendrogram(result$hc_out) + labs(list(title = paste("Dendrogram"), x = "",#
                  y = "Within cluster heterogeneity")) + theme_grey() +#
                    theme(axis.text.x  = element_text(angle=90, vjust=0.5, size=10)
theme(axis.text.x  = element_text(angle=90, vjust=0.5, size=10))
ggdendrogram(result$hc_out) + labs(list(title = paste("Dendrogram"), x = "",#
                  y = "Within cluster heterogeneity")) + theme_grey() +#
                    theme(axis.text.x  = element_text(angle=90, vjust=0.5, size=10))
ggdendrogram(result$hc_out) + labs(list(title = paste("Dendrogram"), x = "",
y = "Within cluster heterogeneity")) + theme_grey() +
theme(axis.text.x  = element_text(angle=90, vjust=0.5, size=6))
ggdendrogram(result$hc_out) + labs(list(title = paste("Dendrogram"), x = "",
y = "Within cluster heterogeneity")) + theme_grey() +
theme(axis.text.x  = element_text(angle=90, size=6))
ggdendrogram(result$hc_out) + labs(list(title = paste("Dendrogram"), x = "",
y = "Within cluster heterogeneity")) + theme_grey() +
theme(axis.text.x  = element_text(angle=90, vjust=0.5, size=6))
ggdendrogram(result$hc_out) + labs(list(title = paste("Dendrogram"), x = "",
y = "Within cluster heterogeneity")) + theme_grey() +
theme(axis.text.x  = element_text(angle=90, size=6))
ggdendrogram(result$hc_out) + labs(list(title = paste("Dendrogram"), x = "",
y = "Within cluster heterogeneity")) +
theme_grey(axis.text.x  = element_text(angle=90, size=6))
ggdendrogram(result$hc_out) + labs(list(title = paste("Dendrogram"), x = "",
y = "Within cluster heterogeneity")) + theme_grey() +
theme(axis.text.x  = element_text(angle=90, size=6))
ggdendrogram(result$hc_out) + labs(list(title = paste("Dendrogram"), x = "",
y = "Within cluster heterogeneity")) +
theme(axis.text.x  = element_text(angle=90, size=6))
result$hc_out %>% dendro_data(type="rectangle") %>%#
                    segment %>% filter(y > hc_cutoff) %>% ggplot(.) +#
                    geom_segment(aes(x=x, y=y, xend=xend, yend=yend))+#
                    labs(list(title = paste("Cutoff dendrogram"), x = "", y = "Within cluster heterogeneity")) +#
                    theme_dendro() + theme(axis.text.x = element_blank())
hc_cutoff = .02
result$hc_out %>% dendro_data(type="rectangle") %>%#
                    segment %>% filter(y > hc_cutoff) %>% ggplot(.) +#
                    geom_segment(aes(x=x, y=y, xend=xend, yend=yend))+#
                    labs(list(title = paste("Cutoff dendrogram"), x = "", y = "Within cluster heterogeneity")) +#
                    theme_dendro() + theme(axis.text.x = element_blank())
result$hc_out %>% dendro_data(type="rectangle") %>%#
                    segment %>% filter(y > hc_cutoff) %>% ggplot(.) +#
                    geom_segment(aes(x=x, y=y, xend=xend, yend=yend))+#
                    labs(list(title = paste("Cutoff dendrogram"), x = "", y = "Within cluster heterogeneity")) +#
                    theme_bw() + theme(axis.text.x = element_blank())
y = "Within cluster heterogeneity")) + theme_bw() +#
                    theme(axis.text.x  = element_text(angle=90, size=6))
ggdendrogram(result$hc_out) + labs(list(title = paste("Dendrogram"), x = "",#
                  y = "Within cluster heterogeneity")) + theme_bw() +#
                    theme(axis.text.x  = element_text(angle=90, size=6))
?cat
setwd("~/gh/radiant_gh-pages/")
setwd("~/gh/radiant_gh-pages/")
library(rmarkdown)
system('make')
